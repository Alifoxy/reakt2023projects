{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u0418\\u043D\\u043D\\u0430\\\\reakt2023\\\\src\\\\components\\\\Form\\\\Form.js\",\n  _s = $RefreshSig$();\nimport { useForm } from \"react-hook-form\";\nimport { joiResolver } from \"@hookform/resolvers/joi\";\nimport { carValidator } from \"../../validators/carValidator\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { carActions } from \"../../redux/slices/car_slice\";\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Form = () => {\n  _s();\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    formState: {\n      errors,\n      isValid\n    }\n  } = useForm({\n    mode: 'all',\n    resolver: joiResolver(carValidator)\n  });\n  const dispatch = useDispatch();\n  const {\n    carForUpdate\n  } = useSelector(state => state.cars);\n  useEffect(() => {\n    if (carForUpdate) {\n      setValue('brand', carForUpdate.brand, {\n        shouldValidate: true\n      });\n      setValue('price', carForUpdate.price, {\n        shouldValidate: true\n      });\n      setValue('year', carForUpdate.year, {\n        shouldValidate: true\n      });\n    }\n  }, [carForUpdate]);\n  const create = async car => {\n    await dispatch(carActions.create({\n      car\n    }));\n    reset();\n  };\n  const update = async car => {\n    await dispatch(carActions.updateById({\n      id: carForUpdate.id,\n      car\n    }));\n    reset();\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(carForUpdate ? update : create),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: 'brand',\n      ...register('brand')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), errors.brand && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: errors.brand.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: 'price',\n      ...register('price', {\n        valueAsNumber: true\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), errors.price && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: errors.price.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: 'year',\n      ...register('year', {\n        valueAsNumber: true\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), errors.year && /*#__PURE__*/_jsxDEV(\"span\", {\n      children: errors.year.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: !isValid,\n      children: carForUpdate ? 'update' : 'create'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_s(Form, \"iWS2vyM1vQh1fuv5caGn7z5uOuc=\", false, function () {\n  return [useForm, useDispatch, useSelector];\n});\n_c = Form;\nexport { Form };\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["useForm","joiResolver","carValidator","useDispatch","useSelector","carActions","useEffect","Form","register","handleSubmit","reset","setValue","formState","errors","isValid","mode","resolver","dispatch","carForUpdate","state","cars","brand","shouldValidate","price","year","create","car","update","updateById","id","message","valueAsNumber"],"sources":["C:/Users/Инна/reakt2023/src/components/Form/Form.js"],"sourcesContent":["import {useForm} from \"react-hook-form\";\r\nimport {joiResolver} from \"@hookform/resolvers/joi\";\r\n\r\nimport {carValidator} from \"../../validators/carValidator\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {carActions} from \"../../redux/slices/car_slice\";\r\nimport {useEffect} from \"react\";\r\n\r\nconst Form = () => {\r\n    const {register, handleSubmit, reset, setValue, formState: {errors, isValid}} = useForm({\r\n        mode: 'all',\r\n        resolver: joiResolver(carValidator)\r\n    });\r\n    const dispatch = useDispatch();\r\n    const {carForUpdate} = useSelector(state => state.cars);\r\n\r\n    useEffect(() => {\r\n        if (carForUpdate) {\r\n            setValue('brand', carForUpdate.brand, {shouldValidate: true})\r\n            setValue('price', carForUpdate.price, {shouldValidate: true})\r\n            setValue('year', carForUpdate.year, {shouldValidate: true})\r\n        }\r\n    }, [carForUpdate])\r\n\r\n    const create = async (car) => {\r\n        await dispatch(carActions.create({car}))\r\n        reset()\r\n    };\r\n\r\n    const update = async (car) => {\r\n        await dispatch(carActions.updateById({id: carForUpdate.id, car}))\r\n        reset()\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit(carForUpdate ? update : create)}>\r\n            <input type=\"text\" placeholder={'brand'} {...register('brand')}/>\r\n            {errors.brand&&<span>{errors.brand.message}</span>}\r\n            <input type=\"text\" placeholder={'price'} {...register('price', {valueAsNumber: true})}/>\r\n            {errors.price&&<span>{errors.price.message}</span>}\r\n            <input type=\"text\" placeholder={'year'} {...register('year', {valueAsNumber: true})}/>\r\n            {errors.year&&<span>{errors.year.message}</span>}\r\n            <button disabled={!isValid}>{carForUpdate ? 'update' : 'create'}</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport {Form};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}